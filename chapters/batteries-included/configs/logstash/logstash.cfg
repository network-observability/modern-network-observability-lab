input {
    # ---------------------------------------------------------------------
    # Syslog Listening ports
    # ---------------------------------------------------------------------
    syslog {
        port => 1514
        type => syslog
        tags => [ 'syslog','server' ]
    }
    syslog {
        port => 1515
        type => syslog
        tags => [ 'eos','ios','network' ]
    }
    syslog {
        port => 1516
        type => syslog
        tags => [ 'nxos','network' ]
    }
    syslog {
        port => 1517
        type => syslog
        tags => [ 'junos','network' ]
    }
}

filter {



    # ---------------------------------------------------------------------
    # General Data Normalizer
    # ---------------------------------------------------------------------
    mutate {
        rename => { "logsource" => "device"}
    }

    # This lets Loki color our log entries according this table https://grafana.com/docs/grafana/latest/explore/logs-integration/
    syslog_pri {
      add_field => { "level" => "%{syslog_severity}" }
    }

    if "server" in [tags] {
      mutate {
        add_field => { "log_source" => "server" }
      }
    }

    if "network" in [tags] {
      mutate {
        add_field => { "log_source" => "network" }
      }
    }

    mutate {
      remove_field => [ "syslog_severity_code", "syslog_pri", "port", "syslog_facility_code", "syslog_facility", "priority", "severity" ]
    }

    # ---------------------------------------------------------------------
    # Interface Parser
    # ---------------------------------------------------------------------
    if [vendor_facility_process] == "UPDOWN" or [vendor_facility_process] == "IF_UP" or [vendor_facility_process] == "IF_DOWN_LINK_FAILURE" or [vendor_facility_process] == "SNMP_TRAP_LINK_DOWN" {
      grok {
        match => [
          "log_message", "Interface\s+%{NOTSPACE:interface_name},\s+changed\s+state\s+to\s+%{WORD:status}",
          "log_message", "Interface\s+%{NOTSPACE:interface_name}\s+(\(description:(\s+)?%{GREEDYDATA:description}\)\s+)?is\s+%{WORD:status}(\s+\(%{GREEDYDATA:status_detail_reason}\))?",
          "log_message", "ifIndex\s+\d+,\s+ifAdminStatus\s+%{WORD:admin_status}\(\d+\),\s+ifOperStatus\s+%{WORD:status}\(\d+\),\s+ifName\s+%{NOTSPACE:interface_name}"
        ]
        tag_on_failure => ["_interface_status_not_parsed"]
      }
      if '_interface_status_not_parsed' not in [tags] {
        mutate {
          uppercase => ["status", "admin_status"]
        }
      }
    }

    # ---------------------------------------------------------------------
    # Nautobot Data Enricher
    # ---------------------------------------------------------------------
    # HTTP filter to perform a Nautobot API query about the device for metadata
    # http {
    #      url => "${NAUTOBOT_API_URL}/api/dcim/devices/?name=%{device}"
    #      verb => "GET"
    #      headers => {
    #         "Authorization" => "TOKEN ${NAUTOBOT_TOKEN}"
    #      }
    #      target_body => "nb"
    # }

    # if [nb][results][0] {
    #     mutate {
    #         add_field => {
    #             "device_platform" => "%{[nb][results[0][platform][slug]}"
    #             "site" => "%{[nb][results][0][site][slug]}"
    #             "region" => "%{[nb][results][0][region][slug]}"
    #             "device_role" => "%{[nb][results][0][role][slug]}"
    #         }
    #     }
    # }

}

output {

    # ---------------------------------------------------------------------
    # Loki server loki Output
    # ---------------------------------------------------------------------
    loki {
        url => "http://loki:3001/loki/api/v1/push"
    }
    stdout {
        codec => "json"
    }

}